# generated by Makefile Generator or AI tool
.PHONY: dev build preview install format lint clean setup docker-build docker-run docker-dev docker-stop help

# Default target
default: setup

# Development commands
dev:
	@echo "üöÄ Starting Vite development server..."
	pnpm run dev

build:
	@echo "üèóÔ∏è  Building production bundle..."
	pnpm run build

preview:
	@echo "üëÄ Starting Vite preview server..."
	pnpm run preview

# Package management
install:
	@echo "üì¶ Installing dependencies..."
	pnpm install

install-frozen:
	@echo "üîí Installing dependencies with frozen lockfile..."
	pnpm install --frozen-lockfile

# Code quality
format:
	@echo "‚ú® Formatting code..."
	pnpm run format

lint:
	@echo "üîç Linting code..."
	pnpm run lint

lint-fix:
	@echo "üîß Fixing linting issues..."
	pnpm run lint -- --fix

# Cleanup
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf dist
	rm -rf node_modules/.vite

clean-all:
	@echo "üßπ Cleaning all generated files..."
	rm -rf dist
	rm -rf node_modules
	rm -rf .vite

# Docker commands
docker-build:
	@echo "üê≥ Building Docker image..."
	docker build -t chat-client:latest .

docker-run:
	@echo "üê≥ Running Docker container..."
	docker run -d --name chat-client --network chatnet -p 4173:4173 -e VITE_URL=http://server:3000 chat-client:latest

docker-dev:
	@echo "üê≥ Starting Docker development environment..."
	docker compose -f docker-compose.dev.yml up -d client

docker-stop:
	@echo "üê≥ Stopping Docker containers..."
	docker stop chat-client || true
	docker rm chat-client || true

docker-logs:
	@echo "üê≥ Viewing Docker logs..."
	docker logs -f chat-client

# Compose commands
compose-up:
	@echo "üê≥ Starting all services with Docker Compose..."
	docker compose up -d

compose-down:
	@echo "üê≥ Stopping all services..."
	docker compose down

compose-build:
	@echo "üê≥ Building and starting services..."
	docker compose up -d --build

compose-logs:
	@echo "üê≥ Viewing compose logs..."
	docker compose logs -f client

# Setup and maintenance
setup: install format build preview
	@echo "‚úÖ Client setup complete!"

setup-dev: install-frozen format lint
	@echo "‚úÖ Development setup complete!"

deps-update:
	@echo "üì¶ Updating dependencies..."
	pnpm update

deps-check:
	@echo "üîç Checking for outdated dependencies..."
	pnpm outdated

# Testing (if you add tests later)
test:
	@echo "üß™ Running tests..."
	@echo "No tests configured yet. Add 'test' script to package.json"

test-watch:
	@echo "üß™ Running tests in watch mode..."
	@echo "No tests configured yet. Add 'test:watch' script to package.json"

# Health checks
health:
	@echo "üè• Checking client health..."
	@curl -f http://localhost:4173 > /dev/null 2>&1 && echo "‚úÖ Client is healthy" || echo "‚ùå Client is not responding"

health-dev:
	@echo "üè• Checking dev server health..."
	@curl -f http://localhost:5173 > /dev/null 2>&1 && echo "‚úÖ Dev server is healthy" || echo "‚ùå Dev server is not responding"

# Utility commands
serve: preview

start: dev

build-analyze:
	@echo "üìä Building with bundle analysis..."
	pnpm run build -- --analyze

# Help command
help:
	@echo "üìö Available commands:"
	@echo ""
	@echo "Development:"
	@echo "  dev          - Start Vite development server"
	@echo "  build        - Build production bundle"
	@echo "  preview      - Start Vite preview server"
	@echo "  serve        - Alias for preview"
	@echo "  start        - Alias for dev"
	@echo ""
	@echo "Package Management:"
	@echo "  install      - Install dependencies"
	@echo "  install-frozen - Install with frozen lockfile"
	@echo "  deps-update  - Update dependencies"
	@echo "  deps-check   - Check for outdated dependencies"
	@echo ""
	@echo "Code Quality:"
	@echo "  format       - Format code with Prettier"
	@echo "  lint         - Lint code with ESLint"
	@echo "  lint-fix     - Fix linting issues"
	@echo ""
	@echo "Cleanup:"
	@echo "  clean        - Remove build artifacts"
	@echo "  clean-all    - Remove all generated files"
	@echo ""
	@echo "Docker:"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run Docker container"
	@echo "  docker-dev   - Start Docker development"
	@echo "  docker-stop  - Stop Docker containers"
	@echo "  docker-logs  - View Docker logs"
	@echo ""
	@echo "Docker Compose:"
	@echo "  compose-up   - Start all services"
	@echo "  compose-down - Stop all services"
	@echo "  compose-build - Build and start services"
	@echo "  compose-logs - View compose logs"
	@echo ""
	@echo "Setup:"
	@echo "  setup        - Install deps, format, ready for dev"
	@echo "  setup-dev    - Full development setup"
	@echo ""
	@echo "Health:"
	@echo "  health       - Check client health"
	@echo "  health-dev   - Check dev server health"
	@echo ""
	@echo "Utility:"
	@echo "  build-analyze - Build with bundle analysis"
	@echo "  help         - Show this help message"
